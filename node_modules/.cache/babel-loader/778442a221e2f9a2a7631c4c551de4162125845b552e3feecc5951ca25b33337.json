{"ast":null,"code":"import { useLayoutEffect as r } from \"@radix-ui/react-use-layout-effect\";\nimport { observeElementRect as t } from \"@radix-ui/rect\";\nimport * as e from \"react\";\nexport function useRect(o) {\n  const [u, c] = e.useState();\n  return r(() => {\n    if (o.current) {\n      const r = t(o.current, c);\n      return () => {\n        c(void 0), r();\n      };\n    }\n  }, [o]), u;\n}","map":{"version":3,"names":["useRect","o","u","c","e","useState","r","current","t"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-rect/dist/packages/react/use-rect/src/useRect.tsx"],"sourcesContent":["import * as React from 'react';\nimport { observeElementRect } from '@radix-ui/rect';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\n\nimport type { Measurable } from '@radix-ui/rect';\n\n/**\n * Use this custom hook to get access to an element's rect (getBoundingClientRect)\n * and observe it along time.\n */\nfunction useRect(\n  /** A reference to the element whose rect to observe */\n  refToObserve: React.RefObject<Measurable>\n) {\n  const [rect, setRect] = React.useState<ClientRect>();\n  useLayoutEffect(() => {\n    if (refToObserve.current) {\n      const unobserve = observeElementRect(refToObserve.current, setRect);\n      return () => {\n        setRect(undefined);\n        unobserve();\n      };\n    }\n    return;\n  }, [refToObserve]);\n  return rect;\n}\n\nexport { useRect };\n"],"mappings":";;;OAUA,SAASA,QAEPC,CAAA;EAEA,OAAOC,CAAA,EAAMC,CAAA,IAAWC,CAAA,CAAMC,QAAA;EAW9B,OAVAC,CAAA,CAAgB;IACd,IAAIL,CAAA,CAAaM,OAAA,EAAS;MACxB,MAAMD,CAAA,GAAYE,CAAA,CAAmBP,CAAA,CAAaM,OAAA,EAASJ,CAAA;MAC3D,OAAO;QACLA,CAAA,MAAQ,IACRG,CAAA;MAAA;IAAA;EAAA,GAIH,CAACL,CAAA,IACGC,CAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}