{"ast":null,"code":"import * as e from \"react\";\nexport function useCallbackRef(r) {\n  const t = e.useRef(r);\n  return e.useEffect(() => {\n    t.current = r;\n  }), e.useCallback((...e) => {\n    var r;\n    return null === (r = t.current) || void 0 === r ? void 0 : r.call(t, ...e);\n  }, []);\n}","map":{"version":3,"names":["useCallbackRef","r","t","e","useRef","useEffect","current","useCallback","call"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-controllable-state/node_modules/@radix-ui/react-use-callback-ref/dist/packages/react/use-callback-ref/src/useCallbackRef.tsx"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: any[]) => any>(callback: T | undefined): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  return React.useCallback(\n    ((...args) => {\n      return callbackRef.current?.(...args);\n    }) as T,\n    []\n  );\n}\n\nexport { useCallbackRef };\n"],"mappings":";OAMA,SAASA,eAAkDC,CAAA;EACzD,MAAMC,CAAA,GAAcC,CAAA,CAAMC,MAAA,CAAOH,CAAA;EAMjC,OAJAE,CAAA,CAAME,SAAA,CAAU;IACdH,CAAA,CAAYI,OAAA,GAAUL,CAAA;EAAA,IAGjBE,CAAA,CAAMI,WAAA,CACV,IAAIJ,CAAA;IAAS,IAAAF,CAAA;IACZ,iBAAAA,CAAA,GAAOC,CAAA,CAAYI,OAAA,UAAnB,MAAAL,CAAA,YAAOA,CAAA,CAAAO,IAAA,CAAAN,CAAA,KAAyBC,CAAA;EAAA,GAElC;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}