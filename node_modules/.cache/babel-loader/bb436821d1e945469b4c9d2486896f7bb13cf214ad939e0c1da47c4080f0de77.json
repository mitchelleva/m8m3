{"ast":null,"code":"import * as e from \"react\";\nfunction r() {\n  return (r = Object.assign || function (e) {\n    for (var r = 1; r < arguments.length; r++) {\n      var t = arguments[r];\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n    return e;\n  }).apply(this, arguments);\n}\nconst t = {\n    prefix: Math.round(1e10 * Math.random()),\n    current: 0\n  },\n  n = e.createContext(t);\nexport const IdProvider = o => {\n  const a = e.useContext(n),\n    i = a === t,\n    c = e.useMemo(() => ({\n      prefix: i ? 0 : ++a.prefix,\n      current: 0\n    }), [i, a]);\n  return e.createElement(n.Provider, r({\n    value: c\n  }, o));\n};\nexport function useId(r) {\n  const o = e.useContext(n);\n  return Boolean(null === globalThis || void 0 === globalThis ? void 0 : globalThis.document) || o !== t || console.warn(\"When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.\"), e.useMemo(() => r || \"radix-id-\".concat(o.prefix, \"-\").concat(++o.current), [r]);\n}","map":{"version":3,"names":["t","prefix","Math","round","random","current","n","e","createContext","IdProvider","o","a","useContext","i","c","useMemo","createElement","Provider","r","value","useId","Boolean","globalThis","document","console","warn","concat"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-id/dist/packages/react/id/src/id.tsx"],"sourcesContent":["// This implementation is heavily inspired by react-aria's implementation\n// See: https://github.com/adobe/react-spectrum/blob/main/packages/%40react-aria/ssr/src/SSRProvider.tsx\n\nimport * as React from 'react';\n\ntype IdContextValue = {\n  prefix: number;\n  current: number;\n};\n\nconst defaultIdContext: IdContextValue = {\n  prefix: Math.round(Math.random() * 10000000000),\n  current: 0,\n};\n\nconst IdContext = React.createContext<IdContextValue>(defaultIdContext);\n\nconst IdProvider: React.FC = (props) => {\n  const currentContext = React.useContext(IdContext);\n  const isRootIdProvider = currentContext === defaultIdContext;\n  const context: IdContextValue = React.useMemo(\n    () => ({\n      prefix: isRootIdProvider ? 0 : ++currentContext.prefix,\n      current: 0,\n    }),\n    [isRootIdProvider, currentContext]\n  );\n\n  return <IdContext.Provider value={context} {...props} />;\n};\n\nfunction useId(deterministicId?: string): string {\n  const context = React.useContext(IdContext);\n  const isBrowser = Boolean(globalThis?.document);\n\n  if (!isBrowser && context === defaultIdContext) {\n    console.warn(\n      'When server rendering, you must wrap your application in an <IdProvider> to ensure consistent ids are generated between the client and server.'\n    );\n  }\n\n  return React.useMemo(\n    () => deterministicId || `radix-id-${context.prefix}-${++context.current}`,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [deterministicId]\n  );\n}\n\nexport { IdProvider, useId };\n"],"mappings":";;;;;;;;;;AAUA,MAAMA,CAAA,GAAmC;IACvCC,MAAA,EAAQC,IAAA,CAAKC,KAAA,CAAsB,OAAhBD,IAAA,CAAKE,MAAA;IACxBC,OAAA,EAAS;EAAA;EAGLC,CAAA,GAAYC,CAAA,CAAMC,aAAA,CAA8BR,CAAA;AAAA,OAEtD,MAAMS,UAAA,GAAwBC,CAAA;EAC5B,MAAMC,CAAA,GAAiBJ,CAAA,CAAMK,UAAA,CAAWN,CAAA;IAClCO,CAAA,GAAmBF,CAAA,KAAmBX,CAAA;IACtCc,CAAA,GAA0BP,CAAA,CAAMQ,OAAA,CACpC;MACEd,MAAA,EAAQY,CAAA,GAAmB,MAAMF,CAAA,CAAeV,MAAA;MAChDI,OAAA,EAAS;IAAA,IAEX,CAACQ,CAAA,EAAkBF,CAAA;EAGrB,OAAOJ,CAAA,CAAAS,aAAA,CAACV,CAAA,CAAUW,QAAA,EAAXC,CAAA;IAAoBC,KAAA,EAAOL;EAAA,GAAaJ,CAAA;AAAA;AAAA,OAGjD,SAASU,MAAMF,CAAA;EACb,MAAMR,CAAA,GAAUH,CAAA,CAAMK,UAAA,CAAWN,CAAA;EASjC,OARkBe,OAAA,CAAO,SAACC,UAAA,SAAD,MAACA,UAAA,QAAD,IAACA,UAAA,CAAYC,QAAA,KAEpBb,CAAA,KAAYV,CAAA,IAC5BwB,OAAA,CAAQC,IAAA,CACN,mJAIGlB,CAAA,CAAMQ,OAAA,CACX,MAAMG,CAAA,IAAe,YAAAQ,MAAA,CAAgBhB,CAAA,CAAQT,MAAA,EAAxB,KAAAyB,MAAA,GAAoChB,CAAA,CAAQL,OAAA,GAEjE,CAACa,CAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}