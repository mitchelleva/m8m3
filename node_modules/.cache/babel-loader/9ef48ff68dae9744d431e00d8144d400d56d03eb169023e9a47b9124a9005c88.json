{"ast":null,"code":"import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { EXRLoader, RGBELoader } from 'three-stdlib';\nimport { suspend } from 'suspend-react';\nimport { presetsObj } from '../helpers/environment-assets.js';\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\nconst isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\nconst isArray = arr => Array.isArray(arr);\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  let loader = null;\n  let isCubeMap = false;\n  let extension;\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n  if (isPromise(files)) {\n    // Using promises that return inline-EXR URLs by default\n    files = suspend(async promise => {\n      const result = await promise;\n      return result.default;\n    }, [files]);\n    loader = EXRLoader;\n  } else {\n    var _files$split$pop;\n\n    // Everything else\n    isCubeMap = isArray(files);\n    extension = !isArray(files) && ((_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase());\n    loader = isCubeMap ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : null;\n  }\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const loaderResult = useLoader(\n  // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath == null ? void 0 : loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ?\n  // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  const sRGBEncoding = 3001;\n  const LinearEncoding = 3000;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\nexport { useEnvironment };","map":{"version":3,"names":["useLoader","CubeReflectionMapping","EquirectangularReflectionMapping","CubeTextureLoader","EXRLoader","RGBELoader","suspend","presetsObj","CUBEMAP_ROOT","isPromise","promise","then","isArray","arr","Array","useEnvironment","files","path","preset","undefined","encoding","extensions","loader","isCubeMap","extension","Error","Object","keys","join","result","default","_files$split$pop","split","pop","toLowerCase","loaderResult","setPath","texture","mapping","sRGBEncoding","LinearEncoding","colorSpace"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/@react-three/drei/core/useEnvironment.js"],"sourcesContent":["import { useLoader } from '@react-three/fiber';\nimport { CubeReflectionMapping, EquirectangularReflectionMapping, CubeTextureLoader } from 'three';\nimport { EXRLoader, RGBELoader } from 'three-stdlib';\nimport { suspend } from 'suspend-react';\nimport { presetsObj } from '../helpers/environment-assets.js';\n\nconst CUBEMAP_ROOT = 'https://raw.githack.com/pmndrs/drei-assets/456060a26bbeb8fdf79326f224b6d99b8bcce736/hdri/';\n\nconst isPromise = promise => typeof promise === 'object' && typeof promise.then === 'function';\n\nconst isArray = arr => Array.isArray(arr);\n\nfunction useEnvironment({\n  files = ['/px.png', '/nx.png', '/py.png', '/ny.png', '/pz.png', '/nz.png'],\n  path = '',\n  preset = undefined,\n  encoding = undefined,\n  extensions\n} = {}) {\n  let loader = null;\n  let isCubeMap = false;\n  let extension;\n\n  if (preset) {\n    if (!(preset in presetsObj)) throw new Error('Preset must be one of: ' + Object.keys(presetsObj).join(', '));\n    files = presetsObj[preset];\n    path = CUBEMAP_ROOT;\n  }\n\n  if (isPromise(files)) {\n    // Using promises that return inline-EXR URLs by default\n    files = suspend(async promise => {\n      const result = await promise;\n      return result.default;\n    }, [files]);\n    loader = EXRLoader;\n  } else {\n    var _files$split$pop;\n\n    // Everything else\n    isCubeMap = isArray(files);\n    extension = !isArray(files) && ((_files$split$pop = files.split('.').pop()) == null ? void 0 : _files$split$pop.toLowerCase());\n    loader = isCubeMap ? CubeTextureLoader : extension === 'hdr' ? RGBELoader : extension === 'exr' ? EXRLoader : null;\n  }\n\n  if (!loader) throw new Error('useEnvironment: Unrecognized file extension: ' + files);\n  const loaderResult = useLoader( // @ts-expect-error\n  loader, isCubeMap ? [files] : files, loader => {\n    loader.setPath == null ? void 0 : loader.setPath(path);\n    if (extensions) extensions(loader);\n  });\n  const texture = isCubeMap ? // @ts-ignore\n  loaderResult[0] : loaderResult;\n  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;\n  const sRGBEncoding = 3001;\n  const LinearEncoding = 3000;\n  if ('colorSpace' in texture) texture.colorSpace = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? 'srgb' : 'srgb-linear';else texture.encoding = (encoding !== null && encoding !== void 0 ? encoding : isCubeMap) ? sRGBEncoding : LinearEncoding;\n  return texture;\n}\n\nexport { useEnvironment };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}