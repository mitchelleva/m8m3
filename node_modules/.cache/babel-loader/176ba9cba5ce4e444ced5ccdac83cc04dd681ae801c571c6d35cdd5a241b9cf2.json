{"ast":null,"code":"import * as e from \"react\";\nexport function usePrevious(r) {\n  const t = e.useRef(r);\n  return e.useEffect(() => {\n    t.current = r;\n  }, [r]), t.current;\n}","map":{"version":3,"names":["usePrevious","r","t","e","useRef","useEffect","current"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx"],"sourcesContent":["import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef<T>(value);\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\n\nexport { usePrevious };\n"],"mappings":";OAEA,SAASA,YAAeC,CAAA;EAGtB,MAAMC,CAAA,GAAMC,CAAA,CAAMC,MAAA,CAAUH,CAAA;EAQ5B,OALAE,CAAA,CAAME,SAAA,CAAU;IACdH,CAAA,CAAII,OAAA,GAAUL,CAAA;EAAA,GACb,CAACA,CAAA,IAGGC,CAAA,CAAII,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}