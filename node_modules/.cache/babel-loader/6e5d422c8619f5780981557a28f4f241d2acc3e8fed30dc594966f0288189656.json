{"ast":null,"code":"import * as e from \"react\";\nexport function useSize(r) {\n  const [t, i] = e.useState(void 0);\n  return e.useEffect(() => {\n    if (r.current) {\n      const e = r.current,\n        t = new ResizeObserver(r => {\n          if (!Array.isArray(r)) return;\n          if (!r.length) return;\n          const t = r[0];\n          let n, o;\n          if (\"borderBoxSize\" in t) {\n            const e = t.borderBoxSize,\n              r = Array.isArray(e) ? e[0] : e;\n            n = r.inlineSize, o = r.blockSize;\n          } else {\n            const r = e.getBoundingClientRect();\n            n = r.width, o = r.height;\n          }\n          i({\n            width: n,\n            height: o\n          });\n        });\n      return t.observe(e, {\n        box: \"border-box\"\n      }), () => {\n        i(void 0), t.unobserve(e);\n      };\n    }\n  }, [r]), t;\n}","map":{"version":3,"names":["useSize","r","t","i","e","useState","useEffect","current","ResizeObserver","Array","isArray","length","n","o","borderBoxSize","inlineSize","blockSize","getBoundingClientRect","width","height","observe","box","unobserve"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-popper/node_modules/@radix-ui/react-use-size/dist/packages/react/use-size/src/useSize.tsx"],"sourcesContent":["/// <reference types=\"resize-observer-browser\" />\n\nimport * as React from 'react';\n\nfunction useSize(\n  /** A reference to the element whose size to observe */\n  refToObserve: React.RefObject<HTMLElement | SVGElement>\n) {\n  const [size, setSize] = React.useState<{ width: number; height: number } | undefined>(undefined);\n\n  React.useEffect(() => {\n    if (refToObserve.current) {\n      const elementToObserve = refToObserve.current;\n      const resizeObserver = new ResizeObserver((entries) => {\n        if (!Array.isArray(entries)) {\n          return;\n        }\n\n        // Since we only observe the one element, we don't need to loop over the\n        // array\n        if (!entries.length) {\n          return;\n        }\n\n        const entry = entries[0];\n        let width: number;\n        let height: number;\n\n        if ('borderBoxSize' in entry) {\n          const borderSizeEntry = entry['borderBoxSize'];\n          // iron out differences between browsers\n          const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;\n          width = borderSize['inlineSize'];\n          height = borderSize['blockSize'];\n        } else {\n          // for browsers that don't support `borderBoxSize`\n          // we calculate a rect ourselves to get the correct border box.\n          const rect = elementToObserve.getBoundingClientRect();\n          width = rect.width;\n          height = rect.height;\n        }\n\n        setSize({ width, height });\n      });\n\n      resizeObserver.observe(elementToObserve, { box: 'border-box' });\n\n      return () => {\n        setSize(undefined);\n        resizeObserver.unobserve(elementToObserve);\n      };\n    }\n    return;\n  }, [refToObserve]);\n\n  return size;\n}\n\nexport { useSize };\n"],"mappings":";OAIA,SAASA,QAEPC,CAAA;EAEA,OAAOC,CAAA,EAAMC,CAAA,IAAWC,CAAA,CAAMC,QAAA,MAAwD;EA+CtF,OA7CAD,CAAA,CAAME,SAAA,CAAU;IACd,IAAIL,CAAA,CAAaM,OAAA,EAAS;MACxB,MAAMH,CAAA,GAAmBH,CAAA,CAAaM,OAAA;QAChCL,CAAA,GAAiB,IAAIM,cAAA,CAAgBP,CAAA;UACzC,KAAKQ,KAAA,CAAMC,OAAA,CAAQT,CAAA,GACjB;UAKF,KAAKA,CAAA,CAAQU,MAAA,EACX;UAGF,MAAMT,CAAA,GAAQD,CAAA,CAAQ;UACtB,IAAIW,CAAA,EACAC,CAAA;UAEJ,IAAI,mBAAmBX,CAAA,EAAO;YAC5B,MAAME,CAAA,GAAkBF,CAAA,CAAKY,aAAA;cAEvBb,CAAA,GAAaQ,KAAA,CAAMC,OAAA,CAAQN,CAAA,IAAmBA,CAAA,CAAgB,KAAKA,CAAA;YACzEQ,CAAA,GAAQX,CAAA,CAAUc,UAAA,EAClBF,CAAA,GAASZ,CAAA,CAAUe,SAAA;UAAA,OACd;YAGL,MAAMf,CAAA,GAAOG,CAAA,CAAiBa,qBAAA;YAC9BL,CAAA,GAAQX,CAAA,CAAKiB,KAAA,EACbL,CAAA,GAASZ,CAAA,CAAKkB,MAAA;UAAA;UAGhBhB,CAAA,CAAQ;YAAEe,KAAA,EAAAN,CAAA;YAAOO,MAAA,EAAAN;UAAA;QAAA;MAKnB,OAFAX,CAAA,CAAekB,OAAA,CAAQhB,CAAA,EAAkB;QAAEiB,GAAA,EAAK;MAAA,IAEzC;QACLlB,CAAA,MAAQ,IACRD,CAAA,CAAeoB,SAAA,CAAUlB,CAAA;MAAA;IAAA;EAAA,GAI5B,CAACH,CAAA,IAEGC,CAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}