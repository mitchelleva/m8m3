{"ast":null,"code":"import { composeRefs as e } from \"@radix-ui/react-compose-refs\";\nimport { composeEventHandlers as t } from \"@radix-ui/primitive\";\nimport * as r from \"react\";\nfunction o() {\n  return (o = Object.assign || function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var r = arguments[t];\n      for (var o in r) Object.prototype.hasOwnProperty.call(r, o) && (e[o] = r[o]);\n    }\n    return e;\n  }).apply(this, arguments);\n}\nexport const Slot = r.forwardRef((e, t) => {\n  const {\n    children: l,\n    ...i\n  } = e;\n  return 1 === r.Children.count(l) ? r.createElement(n, o({}, i, {\n    ref: t\n  }), l) : r.createElement(r.Fragment, null, r.Children.map(l, e => r.isValidElement(e) && e.type === Slottable ? r.createElement(n, o({}, i, {\n    ref: t\n  }), e.props.children) : e));\n});\nSlot.displayName = \"Slot\";\nconst n = r.forwardRef((t, o) => {\n  const {\n      children: n,\n      ...i\n    } = t,\n    a = r.Children.only(n);\n  return r.isValidElement(a) ? r.cloneElement(a, {\n    ...l(i, a.props),\n    ref: e(o, a.ref)\n  }) : null;\n});\nn.displayName = \"SlotClone\";\nexport const Slottable = ({\n  children: e\n}) => e;\nfunction l(e, r) {\n  const o = {\n    ...r\n  };\n  for (const n in r) {\n    const l = e[n],\n      i = r[n];\n    /^on[A-Z]/.test(n) && (o[n] = t(i, l));\n  }\n  return {\n    ...e,\n    ...o\n  };\n}\nexport const Root = Slot;","map":{"version":3,"names":["Slot","r","forwardRef","e","t","children","l","i","Children","count","createElement","n","o","ref","Fragment","map","isValidElement","type","Slottable","props","displayName","a","only","cloneElement","test","Root"],"sources":["/Users/mitchelleva/projects/me8porty/m8magic/node_modules/leva/node_modules/@radix-ui/react-tooltip/node_modules/@radix-ui/react-slot/dist/packages/react/slot/src/Slot.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { composeRefs } from '@radix-ui/react-compose-refs';\n\n/* -------------------------------------------------------------------------------------------------\n * Slot\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotProps = { children: React.ReactNode };\n\nconst Slot = React.forwardRef<never, SlotProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const childLength = React.Children.count(children);\n\n  if (childLength === 1) {\n    return (\n      <SlotClone {...slotProps} ref={forwardedRef}>\n        {children}\n      </SlotClone>\n    );\n  }\n\n  return (\n    <>\n      {React.Children.map(children, (child) => {\n        if (React.isValidElement(child) && child.type === Slottable) {\n          return (\n            <SlotClone {...slotProps} ref={forwardedRef}>\n              {child.props.children}\n            </SlotClone>\n          );\n        }\n\n        return child;\n      })}\n    </>\n  );\n});\n\nSlot.displayName = 'Slot';\n\n/* -------------------------------------------------------------------------------------------------\n * SlotClone\n * -----------------------------------------------------------------------------------------------*/\n\ntype SlotCloneProps = { children: React.ReactNode };\n\nconst SlotClone = React.forwardRef<any, SlotCloneProps>((props, forwardedRef) => {\n  const { children, ...slotProps } = props;\n  const child = React.Children.only(children);\n\n  return React.isValidElement(child)\n    ? React.cloneElement(child, {\n        ...mergeProps(slotProps, child.props),\n        ref: composeRefs(forwardedRef, (child as any).ref),\n      })\n    : null;\n});\n\nSlotClone.displayName = 'SlotClone';\n\n/* -------------------------------------------------------------------------------------------------\n * Slottable\n * -----------------------------------------------------------------------------------------------*/\n\nconst Slottable = ({ children }: { children: React.ReactNode }) => {\n  return children as React.ReactElement;\n};\n\n/* ---------------------------------------------------------------------------------------------- */\n\ntype AnyProps = Record<string, any>;\n\nfunction mergeProps(slotProps: AnyProps, childProps: AnyProps) {\n  // all child props should override\n  const overrideProps = { ...childProps };\n\n  // if it's a handler, modify the override by composing the base handler\n  for (const propName in childProps) {\n    const slotPropValue = slotProps[propName];\n    const childPropValue = childProps[propName];\n    const isHandler = /^on[A-Z]/.test(propName);\n\n    if (isHandler) {\n      overrideProps[propName] = composeEventHandlers(childPropValue, slotPropValue);\n    }\n  }\n\n  return { ...slotProps, ...overrideProps };\n}\n\nconst Root = Slot;\n\nexport {\n  Slot,\n  Slottable,\n  //\n  Root,\n};\n"],"mappings":";;;;;;;;;;;;OAUA,MAAMA,IAAA,GAAOC,CAAA,CAAMC,UAAA,CAA6B,CAACC,CAAA,EAAOC,CAAA;EACtD;IAAMC,QAAA,EAAEC,CAAA;IAAA,GAAaC;EAAA,IAAcJ,CAAA;EAGnC,OAAoB,MAFAF,CAAA,CAAMO,QAAA,CAASC,KAAA,CAAMH,CAAA,IAIrCL,CAAA,CAAAS,aAAA,CAACC,CAAA,EAADC,CAAA,KAAeL,CAAA,EAAf;IAA0BM,GAAA,EAAKT;EAAA,IAC5BE,CAAA,IAMLL,CAAA,CAAAS,aAAA,CAAAT,CAAA,CAAAa,QAAA,QACGb,CAAA,CAAMO,QAAA,CAASO,GAAA,CAAIT,CAAA,EAAWH,CAAA,IACzBF,CAAA,CAAMe,cAAA,CAAeb,CAAA,KAAUA,CAAA,CAAMc,IAAA,KAASC,SAAA,GAE9CjB,CAAA,CAAAS,aAAA,CAACC,CAAA,EAADC,CAAA,KAAeL,CAAA,EAAf;IAA0BM,GAAA,EAAKT;EAAA,IAC5BD,CAAA,CAAMgB,KAAA,CAAMd,QAAA,IAKZF,CAAA;AAAA;AAMfH,IAAA,CAAKoB,WAAA,GAAc;AAQnB,MAAMT,CAAA,GAAYV,CAAA,CAAMC,UAAA,CAAgC,CAACE,CAAA,EAAOQ,CAAA;EAC9D;MAAMP,QAAA,EAAEM,CAAA;MAAA,GAAaJ;IAAA,IAAcH,CAAA;IAC7BiB,CAAA,GAAQpB,CAAA,CAAMO,QAAA,CAASc,IAAA,CAAKX,CAAA;EAElC,OAAOV,CAAA,CAAMe,cAAA,CAAeK,CAAA,IACxBpB,CAAA,CAAMsB,YAAA,CAAaF,CAAA,EAAO;IAAA,GACrBf,CAAA,CAAWC,CAAA,EAAWc,CAAA,CAAMF,KAAA;IAC/BN,GAAA,EAAKV,CAAA,CAAYS,CAAA,EAAeS,CAAA,CAAcR,GAAA;EAAA,KAEhD;AAAA;AAGNF,CAAA,CAAUS,WAAA,GAAc;AAAA,OAMxB,MAAMF,SAAA,GAAYA,CAAA;EAAGb,QAAA,EAAAF;AAAA,MACZA,CAAA;AAOT,SAASG,EAAWH,CAAA,EAAqBF,CAAA;EAEvC,MAAMW,CAAA,GAAgB;IAAA,GAAKX;EAAA;EAG3B,KAAK,MAAMU,CAAA,IAAYV,CAAA,EAAY;IACjC,MAAMK,CAAA,GAAgBH,CAAA,CAAUQ,CAAA;MAC1BJ,CAAA,GAAiBN,CAAA,CAAWU,CAAA;IAChB,WAAWa,IAAA,CAAKb,CAAA,MAGhCC,CAAA,CAAcD,CAAA,IAAYP,CAAA,CAAqBG,CAAA,EAAgBD,CAAA;EAAA;EAInE,OAAO;IAAA,GAAKH,CAAA;IAAA,GAAcS;EAAA;AAAA;AAAA,OAG5B,MAAMa,IAAA,GAAOzB,IAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}